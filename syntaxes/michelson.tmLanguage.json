{
  "scopeName": "source.michelson",
  "name": "Michelson",
  "patterns": [
    {
      "include": "#bytes"
    },
    {
      "include": "#string"
    },
    {
      "include": "#number"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#multicomment"
    },
    {
      "include": "#block"
    },
    {
      "include": "#data"
    },
    {
      "include": "#instruction"
    },
    {
      "include": "#type"
    },
    {
      "include": "#macros"
    },
    {
      "include": "#annotations"
    }
  ],
  "repository": {
    "string": {
      "name": "string.quoted.michelson",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "string.quoted.michelson",
          "match": "\\\\."
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "string.michelson",
          "match": "\\b-?[0-9]+\\b"
        }
      ]
    },
    "bytes": {
      "patterns": [
        {
          "name": "string.michelson",
          "match": "\\b0x[0-9A-Ea-e]*\\b"
        }
      ]
    },
    "comment": {
      "name": "comment.language.michelson",
      "begin": "#",
      "end": "\n",
      "patterns": [
        {
          "name": "constant.character.escape.michelson",
          "match": "wordPattern"
        }
      ]
    },
    "multicomment": {
      "name": "comment.language.michelson",
      "begin": "\\/\\*",
      "end": "\\*\\/",
      "patterns": [
        {
          "name": "constant.character.escape.michelson",
          "match": "wordPattern"
        }
      ]
    },
    "block": {
      "patterns": [
        {
          "match": "\\b(parameter|storage|code?)\\b",
          "name": "keyword.control.michelson"
        }
      ]
    },
    "data": {
      "patterns": [
        {
          "match": "\\b(Unit|True|False|Pair|Left|Right|Some|None|Elt)\\b",
          "name": "variable.other.enummember.michelson"
        }
      ]
    },
    "instruction": {
      "patterns": [
        {
          "match": "\\b(DROP|DUP|SWAP|PUSH|SOME|NONE|UNIT|IF_NONE|PAIR|CAR|CDR|LEFT|RIGHT|IF_LEFT|IF_RIGHT|NIL|CONS|IF_CONS|SIZE|EMPTY_SET|EMPTY_MAP|MAP|ITER|MEM|GET|UPDATE|IF|LOOP|LOOP_LEFT|LAMBDA|EXEC|DIP|FAILWITH|CAST|RENAME|CONCAT|SLICE|PACK|UNPACK|ADD|SUB|MUL|EDIV|ABS|NEG|LSL|LSR|OR|AND|XOR|NOT|COMPARE|EQ|NEQ|LT|GT|LE|GE|SELF|CONTRACT|TRANSFER_TOKENS|SET_DELEGATE|CREATE_CONTRACT|IMPLICIT_ACCOUNT|NOW|AMOUNT|BALANCE|CHECK_SIGNATURE|BLAKE2B|SHA256|SHA512|HASH_KEY|STEPS_TO_QUOTA|SOURCE|SENDER|ADDRESS|DIG|DUG|EMPTY_BIG_MAP|APPLY|CHAIN_ID)\\b",
          "name": "support.function.michelson"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "match": "\\b(option|list|set|contract|pair|or|lambda|map|big_map)\\b",
          "name": "entity.name.type.michelson support.type.michelson"
        },
        {
          "match": "\\b(key|unit|signature|operation|address|int|nat|string|bytes|mutez|bool|key_hash|timestamp|chain_id)\\b",
          "name": "entity.name.type.michelson support.type.michelson"
        }
      ]
    },
    "macros": {
      "patterns": [
        {
          "match": "\\b(IF_SOME|FAIL|ASSERT|ASSERT_NONE|ASSERT_SOME|ASSERT_LEFT|ASSERT_RIGHT|UNPAIR|(SET|MAP)_C[AD]+R)\\b",
          "name": "variable.function.michelson meta.preprocessor.numeric.michelson"
        },
        {
          "match": "\\b(DII+P|C[AD]{2,}R|DUU+P|P[PAI]{3,}R|UNP[PAI]{3,}R)\\b",
          "name": "variable.function.michelson meta.preprocessor.numeric.michelson"
        },
        {
          "match": "\\bCMP(EQ|NEQ|LT|GT|LE|GE)\\b",
          "name": "variable.function.michelson meta.preprocessor.numeric.michelson"
        },
        {
          "match": "\\bIF(EQ|NEQ|LT|GT|LE|GE)\\b",
          "name": "variable.function.michelson meta.preprocessor.numeric.michelson"
        },
        {
          "match": "\\bIFCMP(EQ|NEQ|LT|GT|LE|GE)\\b",
          "name": "variable.function.michelson meta.preprocessor.numeric.michelson"
        },
        {
          "match": "\\bASSERT_(EQ|NEQ|LT|LE|GT|GE)\\b",
          "name": "variable.function.michelson meta.preprocessor.numeric.michelson"
        },
        {
          "match": "\\bASSERT_CMP(EQ|NEQ|LT|LE|GT|GE)\\b",
          "name": "variable.function.michelson meta.preprocessor.numeric.michelson"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "match": "(?<=\\s)%[A-z_0-9%@]*",
          "name": "entity.other.attribute-name.michelson"
        },
        {
          "match": "(?<=\\s)@[A-z_0-9%]+\\b",
          "name": "entity.other.attribute-name.michelson"
        },
        {
          "match": "(?<=\\s):[A-z_0-9]+\\b",
          "name": "entity.other.attribute-name.michelson"
        }
      ]
    }
  }
}
